@model IEnumerable<TaskMenagerApp.Models.MyTask>

@{
    ViewData["Title"] = "Index";
}

<table class="table">
    <thead>
        <tr>
            <th>
                No.:
            </th>
            <th>
                Task:
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Data)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Topic)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Data)
            </td>

            <td>
                <div class="status-badge @GetStatusColor(item.Status)" onclick="showStatusDropdown(@item.Id)">
                    <span class="status-value">@GetStatusDisplayName(item.Status)</span>
                    <div class="status-select">
                        <select onchange="updateStatus(@item.Id, this.value)">
                            <option value="@StatusTask.Not_start">No start</option>
                            <option value="@StatusTask.Start">Start</option>
                            <option value="@StatusTask.In_progres">In progress</option>
                            <option value="@StatusTask.Break">Break</option>
                            <option value="@StatusTask.Completed">Completed</option>
                        </select>
                    </div>
                </div>
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new {id=item.Id}) |
                @Html.ActionLink("Details", "Details", new {id=item.Id}) |
                @Html.ActionLink("Delete", "Delete", new {id=item.Id })
            </td>
        </tr>
}
    </tbody>
</table>

@*Button for add new tasks*@
<div class="container mt-4">
    <a class="btn btn-primary" style="background-color: lightblue; border-radius: 10px; color: black" asp-action="Create">Add new task</a>
</div>


<style>
    .status-badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
        text-align: center;
        cursor: pointer;
    }

    .status-badge.Not_start {
        background-color: red;
        color: white;
    }

    .status-badge.Start {
        background-color: green;
        color: white;
    }

    .status-badge.In_progres {
        background-color: blue;
        color: white;
    }

    .status-badge.Break {
        background-color: orange;
        color: white;
    }

    .status-badge.Completed {
        background-color: green;
        color: white;
    }

    .status-value {
        display: inline-block;
        color: white;
    }

    .status-select {
        display: none;
    }

    .status-select select {
        width: 100%;
    }

</style>

@functions 
{
    public string GetStatusColor(StatusTask status)
    {
        switch (status)
        {
            case StatusTask.Not_start:
                return "Not_start";
            case StatusTask.Start:
                return "Start";
            case StatusTask.In_progres:
                return "In_progres";
            case StatusTask.Break:
                return "Break";
            case StatusTask.Completed:
                return "Completed";
            default:
                return "";
        }
    }

    public string GetStatusDisplayName(StatusTask status)
    {
        switch (status)
        {
            case StatusTask.Not_start:
                return "No start";
            case StatusTask.Start:
                return "Start";
            case StatusTask.In_progres:
                return "In progress";
            case StatusTask.Break:
                return "Break";
            case StatusTask.Completed:
                return "Completed";
            default:
                return "";
        }
    }

}

<script>

    function showStatusDropdown(taskId) {
        var statusBadge = document.querySelector('div[data-taskid="' + taskId + '"]');
        var statusSelect = statusBadge.querySelector('.status-select');

        if (statusSelect.style.display === 'none') {
            statusSelect.style.display = 'block';
        } else {
            statusSelect.style.display = 'none';
        }
    }

    function updateStatus(taskId, status) {
        var statusBadge = document.querySelector('div[data-taskid="' + taskId + '"]');
        var statusValue = statusBadge.querySelector('.status-value');
        var statusSelect = statusBadge.querySelector('.status-select');

        statusValue.textContent = GetStatusDisplayName(status);
        statusBadge.className = 'status-badge ' + GetStatusColor(status);
        statusSelect.style.display = 'none';
    }

}</script>
